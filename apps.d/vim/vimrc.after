" johnnychadda's vimrc
"
" I use Janus Vim Distribution, and I think this vimrc is not much use without
" it.
"
" https://github.com/carlhuda/janus
"
" Rightfully stolen/inspired from:
"
"   https://github.com/ryanb/dotfiles/blob/master/vimrc
"   http://stevelosh.com/blog/2010/09/coming-home-to-vim/#using-the-leader
"   https://github.com/rtomayko/dotfiles/blob/rtomayko/.vimrc
"
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Basics
 
    set autoindent
    set smartindent
    set expandtab

    set mouse=a
    set showtabline=2

    nnoremap <C-S-tab> :tabprevious<CR>
    nnoremap <C-tab>   :tabnext<CR>
    nnoremap <C-t>     :tabnew<CR>
    nnoremap <C-w>     :bdelete<CR>
    inoremap <C-S-tab> <Esc>:tabprevious<CR>i
    inoremap <C-tab>   <Esc>:tabnext<CR>i
    inoremap <C-t>     <Esc>:tabnew<CR>
    inoremap <C-w>     <Esc>:bdelete<CR>

    "setl ts=2 sw=2 sts=2 et
    setl ts=4 sw=4 sts=4 et
 
    au FileType python setl ts=4 sw=4 sts=4 expandtab
    "au FileType python setl ts=4 sw=4 sts=4 noexpandtab
    au FileType c setl ts=4 sw=4 sts=4 expandtab
 
    " How long vim waits before executing a command if there are still other
    " possible combinations, e.g. when using the leader key.
    set timeoutlen=250
 
    " All vim yanking will go to global clipboard
    set clipboard=unnamed
 
    " Reload vimrc
    map <leader>r :so ~/.vimrc.after<cr>
 
    " Automatically re-read buffers whose files have changed externally
    set autoread
 
    " Start scrolling when only 10 lines are left to the screen bottom
    set so=10
 
    nmap > :split<cr>
    nmap < :vsplit<cr>
 
    if ! has("gui_running")
      color desert
    endif
 
    " Make CtrlP always open the file in the current buffer, even if
    " already open in another.
    let g:ctrlp_switch_buffer=0
    let g:ctrlp_root_markers=['*.git', 'Gemfile']
 
    " set cursorline
 
    au FileType go setl noexpandtab sw=2 sts=2
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shortcuts
 
    " Select pasted lines with gp
    nnoremap gp `[v`]
    map <leader>cs :noh<CR>
 
    " Navigate buffers
    nmap <C-n> :bnext<cr>
    nmap <C-m> :bprev<cr>
    nmap <C-j> :Bclose<cr>
 
    nmap <C-cr> o<esc>
 
    " Rarely use double j anyway
    inoremap jj <ESC>
 
    " Opens an edit command with the path of the currently edited file filled in
    " Normal mode: <Leader>e
    nnoremap <leader>e :e 
    nnoremap <leader>ee :e <C-R>=expand("%:p:h") . "/" <CR>
 
    "  Strip all trailing whitespace in file
    function! StripWhitespace ()
        exec ':%s/ \+$//gc'
    endfunction
    map ,s :call StripWhitespace ()<CR>
 
    " Press Shift+P while in visual mode to replace the selection without
    " overwriting the default register
    vmap P p :call setreg('"', getreg('0')) <CR>
 
    " Change foldmethod
    map <leader>fs :set foldmethod=syntax<cr>
    map <leader>fn :set foldmethod=manual<cr>
 
    nmap <D-/> ,c<space>
 
    " Search using Ag
    nmap <D-F> :Ag 
 
    vnoremap ` :normal @a<CR>
    nnoremap ` @a
 
    nmap <C-r> :tabe<cr><D-t>
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin shortcuts
 
    " Fugitive shortcuts
    "nmap <C-g><C-s> :Gstatus<cr>
    "nmap <C-g><C-l> :Glog<cr>
    "
    "nmap <leader>g :Gstatus<cr>
    "nmap <leader>gw :Gwrite<cr>
    "nmap <leader>gc :Gcommit<cr>
    "nmap <leader>gca :Gcommit --amend<cr>
    "nmap <leader>gwc :Gwrite<cr>:Gcommit<cr>
    "nmap <leader>gwa :Gwrite<cr>:Gcommit --amend<cr>
 
    " NERDTree shortcuts
    "nmap <C-d> :NERDTreeToggle<cr>
    "let g:nerdtree_tabs_open_on_console_startup=1
    "au VimEnter *  NERDTree
    "let NERDTreeMapOpenInTab='<ENTER>'
    map <C-d> <plug>NERDTreeTabsToggle<CR>
    "let g:nerdtree_tabs_open_on_console_startup=1
 
    nmap <C-p> :CtrlP<cr>
    nmap <C-]> :CtrlPMRU<cr>
    nmap <C-\> :CtrlPBuffer<cr>
    "nmap <C-[> :CtrlPBuffer<cr>
 
    " Emacsy CTRL-E/A naviation in insert mode
    imap <C-e> <esc>A
    imap <C-a> <esc>I
    map <C-e> <esc>A
    map <C-a> <esc>I
    map <C-s> <esc>:w<cr>
    imap <C-s> <esc>:w<cr>
 
    " Line wrap a paragraph
    imap <C-q> <esc>vapgq<cr>
    map <C-q> <esc>vapgq<cr>
 
    let g:Tex_ViewRule_pdf = 'open'
 
    " LaTeX shortcuts
    let g:Tex_DefaultTargetFormat='pdf'
    map ,c :silent! call Tex_RunLaTeX()<CR>
 
    map <leader>a <esc>:Ag <cword>
 
    " Ctrl-P ignores
    set wildignore+=*.so,*.swp,*.zip,*collected*,chef/tmp
 
    let g:EasyMotion_leader_key = '<leader><leader>'
 
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Assorted magic
 
    " Search for selected text, forwards or backwards.
    vnoremap <silent> * :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy/<C-R><C-R>=substitute(
      \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>
    vnoremap <silent> # :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy?<C-R><C-R>=substitute(
      \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>
 
    " When switching tabs, change to the current directory of the file
    " autocmd BufEnter *.py,*.html,*.haml,*.css,*.js :Rooter
 
    " FIXME: Fix a command for this:
    " set softtabstop=2
    " set shiftwidth=2
    " set tabsize=2
 
    let ctrlp_extensions = [ 'ctrlp-extensions' ]
 
    function! HandleURL()
      let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
      echo s:uri
      if s:uri != ""
        silent exec "!open '".s:uri."'"
      else
        echo "No URI found in line."
      endif
    endfunction
    map <leader>o :call HandleURL()<cr>

